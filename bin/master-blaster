#!/usr/bin/env python

# Master Blaster - Rename Primary Branches Of Code Repositories
# Copyright (C) 2020 Gareth Field - field.gareth @ gmail.com

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import questionary
import requests
import json
from pathlib import Path
import os

GITHUB_API = "https://api.github.com"

repo = ""
repoPublicRepo = ""

with open("./repo.txt", 'r') as repoF:
    repo = repoF.read(40)

with open("./repoPublicRepo.txt", 'r') as repoPublicRepoF:
    repoPublicRepo = repoPublicRepoF.read(40)

intro = """
  Welcome to master-blaster! This program renames primary branches for github users!
  We'll go through the options before making any changes!
"""

print(intro)

licenseText = """
  TODO PRINT LICENSE
"""

print(licenseText)

tokenExplanation = """
  GitHub is deprecating password-based token generation! This is great for
  security, it's going to mean you're going to have to go to GitHub.com and
  come back with an access token to make this program work, though. The next
  question will determine whether the program needs a token with the more
  general `repo` scope or the more limited `public_repo` scope. You can run
  this program again if you're happy with the results!
"""

print(tokenExplanation)

usernamePrompt = """
  Please enter your GitHub username!
"""

repoTypesPrompt = """
  What set of repositories do you want to update?
"""

# repoTypesAll = "All repositories I'm the owner, collaborator, and/or organization member, public and private."
# repoTypesAllPublic = "All repositories I'm the owner, collaborator, and/or organization member, only public, not private."
# repoTypesOwner = "All repositories I'm the owner of, public and private."
# repoTypesOwnerPublic = "All repositories I'm the owner of, only public, not private."
# repoTypesCollaborator = "All repositories I'm the owner of and/or a collaborator on, public and private."
# repoTypesCollaboratorPublic = "All repositories I'm the owner of and/or a collaborator on, only public, not private."
# repoTypesOrganization = "All repositories I'm the owner of and/or a member of the organization, public and private."
# repoTypesOrganizationPublic = "All repositories I'm the owner of and/or a member of the organization, only public, not private."

namesPrompt = """
  What would you like to call your primary branches? (We recommend 'main'.)
"""

namesMain = "All primary branches renamed to 'main'."
namesCustom = "Choose another name to rename all primary branches to."
namesPerRepo = "Interactively choose a name for the primary branch for each repo."

customNamePrompt = """
  What name are you choosing for primary branches?
"""

localDirectoriesPrompt = """
  Repositories not present locally will be cloned to a temporary folder,
  updated, the update pushed, (the default branch on GitHub.com updated,)
  and then deleted locally. We can decrease the use of bandwidth and reduce
  potential conflicts by scanning for repositories that *are* present locally.
  Is this okay? (No other changes will be added or committed.)
"""

gitNewPrompt = """
  We can add a git alias 'git new' that initializes new git repos with HEAD as
  'main', shall we?
"""

# def tokenFetchPrompt(scopes):
#     return f"""
#     Last step! Since password-based token generation is being deprecated, please
#     get a personal access token with the correct scope(s) in order to run this
#     program. To get this token, go to https://github.com, sign in, then go to
#     'Settings', then 'Developer Settings', then 'Personal access tokens', then
#     'Generate new token', confirm your password, name the token in the 'Note'
#     input field, and select the {scopes} scope(s), then 'Generate Token', then
#     copy it to your clipboard and either paste it back here into the prompt, or
#     save it first in case there's an error and you need to retry. (Recommended)
#   """

repoPublicRepoTokenPrompt = """
     Last step! Since password-based token generation is being deprecated, please
     get a personal access token with the correct scope(s) in order to run this
     program. To get this token, go to https://github.com, sign in, then go to
     'Settings', then 'Developer Settings', then 'Personal access tokens', then
     'Generate new token', confirm your password, name the token in the 'Note'
     input field, and select the 'public repo' scope, then 'Generate Token', then
     copy it to your clipboard and either paste it back here into the prompt, or
     save it first in case there's an error and you need to retry. (Recommended)
"""

repoTokenPrompt = """
     Last step! Since password-based token generation is being deprecated, please
     get a personal access token with the correct scope(s) in order to run this
     program. To get this token, go to https://github.com, sign in, then go to
     'Settings', then 'Developer Settings', then 'Personal access tokens', then
     'Generate new token', confirm your password, name the token in the 'Note'
     input field, and select the 'repo' scope, then 'Generate Token', then
     copy it to your clipboard and either paste it back here into the prompt, or
     save it first in case there's an error and you need to retry. (Recommended)
"""

# https://github.com/regexhq/regex-username
# /^([a-z\d]+-)*[a-z\d]+$/i
# p = re.compile('/^([a-z\d]+-)*[a-z\d]+$/i')
# m = p.match("twitch-kidd")
# m2 = p.match("-hyphenstart")
# m3 = p.match("hyphenend-")
# m4 = p.match("987y8uhoiu#$@#$@")
# if m:
#     print('match found', m.group())
# else:
#     print('no match!')
# if m2:
#     print('match found', m2.group())
# else:
#     print('no match!')
# if m3:
#     print('match found', m3.group())
# else:
#     print('no match!')
# if m4:
#     print('match found', m4.group())
# else:
#     print('no match!')
# This didn't work. I need to move on, and if the user mistypes their username, c'est la vie

questions = [
    {
        "type": "text",
        "name": "username",
        "message": usernamePrompt,
    },
    {
        "type": "select",
        "name": "repoTypes",
        "message": repoTypesPrompt,
        "choices": [
            "All repositories I'm the owner, collaborator, and/or organization member, public and private.",
            "All repositories I'm the owner, collaborator, and/or organization member, only public, not private.",
            "All repositories I'm the owner of, public and private.",
            "All repositories I'm the owner of, only public, not private.",
            "All repositories I'm the owner of and/or a collaborator on, public and private.",
            "All repositories I'm the owner of and/or a collaborator on, only public, not private.",
            "All repositories I'm the owner of and/or a member of the organization, public and private.",
            "All repositories I'm the owner of and/or a member of the organization, only public, not private."
        ]
    },
    {
        "type": "select",
        "name": "names",
        "message": namesPrompt,
        "choices": [
            "All primary branches renamed to 'main'.",
            "Choose another name to rename all primary branches to.",
            "Interactively choose a name for the primary branch for each repo."
        ]
    },
    {
        "type": "text",
        "name": "customName",
        "message": customNamePrompt,
        "when": lambda x: x['names'] == "Choose another name to rename all primary branches to."
    },
    {
        "type": "confirm",
        "name": "localDirectories",
        "message": localDirectoriesPrompt
    },
    {
        "type": "confirm",
        "name": "gitNew",
        "message": gitNewPrompt
    },
    {
        "type": "text",
        "name": "repoPublicRepoToken",
        "message": repoPublicRepoTokenPrompt,
        "when": lambda x: x['repoTypes'] == "All repositories I'm the owner, collaborator, and/or organization member, only public, not private." or x['repoTypes'] == "All repositories I'm the owner of, only public, not private." or x['repoTypes'] == "All repositories I'm the owner of and/or a collaborator on, only public, not private." or x['repoTypes'] == "All repositories I'm the owner of and/or a member of the organization, only public, not private."
        # "when": lambda x: any("yeap" == option for option in ["nope", "nope", "yeap"])
        # "when": lambda x: x['repoTypes'] in {"All repositories I'm the owner, collaborator, and/or organization member, only public, not private.", "All repositories I'm the owner of, only public, not private.", "All repositories I'm the owner of and/or a collaborator on, only public, not private.", "All repositories I'm the owner of and/or a member of the organization, only public, not private."}
        # "when": lambda x: not x['repoPublicRepoToken']
        # WHYYY WHYYYYYY
    },
    {
        "type": "text",
        "name": "repoToken",
        "message": repoTokenPrompt,
        "when": lambda x: x['repoTypes'] != "All repositories I'm the owner, collaborator, and/or organization member, only public, not private." and x['repoTypes'] != "All repositories I'm the owner of, only public, not private." and x['repoTypes'] != "All repositories I'm the owner of and/or a collaborator on, only public, not private." and x['repoTypes'] != "All repositories I'm the owner of and/or a member of the organization, only public, not private."
    }
]

answers = questionary.prompt(questions)

token = ""
if 'repoPublicRepoToken' in answers:
    token = answers['repoPublicRepoToken']
else:
    token = answers['repoToken']

# TESTING!
token = repo

username = answers['username']

# TESTING!
username = "Twitchkidd"

headers = {"Authorization": 'token ' + token}

# And this ...
params = {"per_page": "1000"}

# GET /user/repos

# visibility? => all ~ public ~ private
# affiliation? => owner ~ collaborator ~ organization_member
# type? => all ~ owner ~ public ~ private ~ member (422 error if collision with previous)

# This one gets everything!
# Maybe call it reposGetRes?
res = requests.get(f"{GITHUB_API}/user/repos?per_page=1000", headers=headers)

repos = []
for repository in res.json():
    repos.append(repository['name'])
# This could probably be improved to check local repos for if their urls are the same
# We're going to go agead with simple string matching for now.
# # Yea, must upgrade. Seeing repos with the same name that are either forks or from an organization
print(sorted(repos))
print(len(repos))

########################################################################

localRepoNames = []
localRepos = []
# for root, subdirs, files in os.walk(Path.home()):
for root, subdirs, files in os.walk(f"{Path.home()}/Code"):
    for d in subdirs:
        # if any(d == name for name in repos) and ".git" in subdirs:
        if any(d == name for name in repos):
            for root2, subdirs2, files2 in os.walk(f"{root}/{d}"):
                if ".git" in subdirs2:
                    localRepos.append(f"{root}/{d}")
                    localRepoNames.append(d)
                    # okay so {subdirs2}/.git/config after [remote "origin"] \n url =
                    # contains the remoteorigin url
print(sorted(localRepoNames))
print(len(localRepoNames))

# requests.patch is a thing!

# email = ""
# emailStringStart = 0
# if checkGitconfig == "Yes":
#     print("Okay ")
#     with open(f"{Path.home()}/.gitconfig", 'r') as f:
#         # gitconfig = f.read()
#         # print(gitconfig)
#         found = False
#         for line in f:
#             if line.find("email =") != -1:
#                 print(line)
#                 found = True
#                 emailStringStart = line.find("email =")
#                 print(line[emailStringStart + 8:])
#         if found == False:
#             print("Can't find email!")


# PATCH /repos/:owner/:repo
# default_branch? string

# HHMMMM
# __main__ — Top-level script environment¶
# '__main__' is the name of the scope in which top-level code executes. A module’s __name__ is set equal to '__main__' when read from standard input, a script, or from an interactive prompt.

# A module can discover whether or not it is running in the main scope by checking its own __name__, which allows a common idiom for conditionally executing code in a module when it is run as a script or with python -m but not when it is imported:

# if __name__ == "__main__":
#     # execute only if run as a script
#     main()
# For a package, the same effect can be achieved by including a __main__.py module, the contents of which will be executed when the module is run with -m.

# headers = {"user-agent": "my-app-101"}
# payload = { "key1": "Value1", "key2": "Value2"}
# r = requests.whatever("url://something", params=payload)
